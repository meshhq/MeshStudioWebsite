<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mesh Studio Blog on Mesh Studio</title>
    <link>https://meshstudio.io/blog/</link>
    <description>Recent content in Mesh Studio Blog on Mesh Studio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://meshstudio.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The 6 IoT Technology Choices</title>
      <link>https://meshstudio.io/blog/2018-05-22-six-iot-technology-choices/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2018-05-22-six-iot-technology-choices/</guid>
      <description>6 Technology Choices To Consider When Shipping IoT Products Over the past year, we&amp;rsquo;ve worked on several high profiles IoT projects. Throughout this process, we have become acutely aware of the technical challenges that software teams will face when it comes to the shipping production grade connected devices.
Regardless of form factor, most IoT products will share a standard set of fundamental technical requirements. In this post, we enumerate several of these requirements and frame them as questions that technical leaders should be asking themselves at the onset of any IoT project.</description>
    </item>
    
    <item>
      <title>3 Reasons You Should Consider React Native</title>
      <link>https://meshstudio.io/blog/2018-05-03-three-reasons-you-should-consider-react-native/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2018-05-03-three-reasons-you-should-consider-react-native/</guid>
      <description>Three Reasons You Should Be Using React Native We are constantly evaluating new technologies and frameworks at Mesh. We do this to ensure that we make the right technology choices for our customers. We do after all, get paid to make these technology choices, so we have an obligation to our customers to make sure our choices are correct.
One of the frameworks that we’ve had our eye on for a while, but hadn’t pulled the trigger with is React Native.</description>
    </item>
    
    <item>
      <title>Lock Down Your AWS Security With 5 Easy Steps</title>
      <link>https://meshstudio.io/blog/2018-03-29-locking-down-your-aws-in-5-steps/</link>
      <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2018-03-29-locking-down-your-aws-in-5-steps/</guid>
      <description>Lock Down Your AWS Security With 5 Easy Steps For the practically paranoid, improving the security of your AWS infrastructure should be an ever-changing goal to strive towards. Large organizations understand this reality. That’s why they employ entire teams that are dedicated to continually reviewing and auditing their cloud security infrastructure.
For us startups, however, we’re focused on trying to run our company; this security stuff is just another thing to think about.</description>
    </item>
    
    <item>
      <title>5 Practical Steps to Shipping Better Software, Faster</title>
      <link>https://meshstudio.io/blog/2018-03-22-five-practical-tips-for-shipping-software-faster/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2018-03-22-five-practical-tips-for-shipping-software-faster/</guid>
      <description>5 Practical Steps to Shipping Better Software, Faster All software development teams are unique. They are made up of developers, project managers, quality assurance testers, and designers of vary skill sets and seniority levels.
Despite the differences in their makeup, all of these teams share a common objective: to ship high-quality software products, fast.
In reality, the overwhelming majority of software development teams are not able to perform at this high of a level.</description>
    </item>
    
    <item>
      <title>Writing Better Components in Vue.js</title>
      <link>https://meshstudio.io/blog/2018-03-01-readable-vue-components/</link>
      <pubDate>Thu, 01 Mar 2018 12:56:33 -0800</pubDate>
      
      <guid>https://meshstudio.io/blog/2018-03-01-readable-vue-components/</guid>
      <description>Pros and Cons of Vue.js When starting a new project, you want to get things up and running as quickly as possible. While modern JavaScript advancements have made things a lot easier on developers, they have also increased the complexity of getting things going. Every developer who has worked with Webpack knows what I am talking about; Webpack is a great example of a very powerful tool that has an incredibly steep learning curve, even for doing basic things.</description>
    </item>
    
    <item>
      <title>Docker Compose and TypeScript</title>
      <link>https://meshstudio.io/blog/2018-01-29-docker-compose-and-typescript/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2018-01-29-docker-compose-and-typescript/</guid>
      <description>Docker Compose and Typescript These days, it’s easy for web applications to quickly balloon with dependencies and third party libraries. Managing your applications within a team can be a real headache when you start running into versioning issues, db configuration issues, local machine compatibility issues, etc&amp;hellip; Docker Compose can help a lot with these issues — along with giving you a much cleaner way to get your app up and running.</description>
    </item>
    
    <item>
      <title>Spectre Explained</title>
      <link>https://meshstudio.io/blog/2018-01-15-spectre/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2018-01-15-spectre/</guid>
      <description>Spectre and Meltdown Pt 1: What you need to know This is a two-part series that covers both Spectre and Meltdown. In the following piece we will attempt to give an explanation of a recent security exploit known as Spectre
In the news If you&amp;rsquo;ve been paying attention to tech chatter over the past week, you have probably heard about two catastrophic security flaws called Spectre and Meltdown. With so many security breaches in the news, it can be hard to discern which headlines you should be concerned with.</description>
    </item>
    
    <item>
      <title>Session Tokens</title>
      <link>https://meshstudio.io/blog/2018-01-10-session-tokens/</link>
      <pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2018-01-10-session-tokens/</guid>
      <description>Session Tokens Authentication and session management are two areas almost all developers have to deal with repeatedly throughout their career. It’s common for us to reach for a well tested open-source library to bolt onto our app, and that’s a good thing since security logic is one of those things you want a lot of eyes on. But as everything in programming, it helps to know the underlying logic behind the tools we use.</description>
    </item>
    
    <item>
      <title>Authentication vs. Authorization</title>
      <link>https://meshstudio.io/blog/2018-01-05-authentication-vs-authorization/</link>
      <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2018-01-05-authentication-vs-authorization/</guid>
      <description>You allowed in here? Lately I have noticed quite a few people mixing up the the concepts of Authentication and Authorization. This isn’t a big deal if you’re using them interchangeably when talking about most anything besides tech, but these concepts are quite different and worth explaining.
So, What is the Difference Authentication is simply the notion of identity, but it’s a powerful concept. It’s proving to someone (your local TSA agent), or something (the IRS website) that you are who you say you are.</description>
    </item>
    
    <item>
      <title>Setting Up CircleCI</title>
      <link>https://meshstudio.io/blog/2018-01-20-setting-up-circle/</link>
      <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2018-01-20-setting-up-circle/</guid>
      <description>Contiuons Integration with Node.js and CircleCI Software developers tend to come up with complicated names for simple topics. Examples of this include Dependency Injection, Orthogonality, or [think of something]. While these terms sound impressive, they often produce an adverse side effect; novice developers assume the subjects they are describing are complicated and unapproachable.
https://mobile.twitter.com/tenderlove/status/748579020703313920
The above proved to be true for me when I first learned about Continuous Integration (CI).</description>
    </item>
    
    <item>
      <title>How to Explain Bitcoin at Your Holiday Dinner</title>
      <link>https://meshstudio.io/blog/2017-12-20-how-to-explain-bitcoin-at-your-holiday-dinner/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2017-12-20-how-to-explain-bitcoin-at-your-holiday-dinner/</guid>
      <description>How to explain Bitcoin at your holiday dinner Bitcoin has become one of the biggest buzzwords of the year. From the mind-boggling growth, to the stories of people becoming billionaires seemingly overnight, it is a topic that is dominating headlines in both online circles and the mainstream media. While the hype and success stories are all fine and good, most people have no idea what Bitcoin is, let alone the blockchain technology that backs it.</description>
    </item>
    
    <item>
      <title>Intro to Docker with TypeScript</title>
      <link>https://meshstudio.io/blog/2017-12-13-intro-to-docker-with-typescript/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2017-12-13-intro-to-docker-with-typescript/</guid>
      <description>Intro to Docker with TypeScript Over the past few years Docker has emerged as one of the most efficient ways to manage and deploy cloud-based web applications☁️ 💻 . While containers have been around since 2008, Docker helped them go mainstream, fueling the Virtual Machine vs. Container argument.
What are Docker Containers? (and why should I care?) In short, a container is an operating system agnostic environment that hosts a fully functional application.</description>
    </item>
    
    <item>
      <title>Serving HTML with Golang</title>
      <link>https://meshstudio.io/blog/2017-11-06-serving-html-with-golang/</link>
      <pubDate>Mon, 06 Nov 2017 10:09:12 -0800</pubDate>
      
      <guid>https://meshstudio.io/blog/2017-11-06-serving-html-with-golang/</guid>
      <description>Building your next web app with Go! Here at Mesh, we like to keep up-to-date with the latest trends in software development; often trying out various programming languages and frameworks. One of the languages that we like to use is Go. We appreciate that Go is strongly-typed, is opinionated about formatting, and is strict about keeping the structure of programs simple. It is also quite a versatile language, so in this post we will explore how it can be used to create an HTML server using gorilla/mux, jteeuwen/go-bindata, and html/template.</description>
    </item>
    
    <item>
      <title>Fun with Levenshtein Distance</title>
      <link>https://meshstudio.io/blog/2017-11-03-fun-with-levenshtein-distance/</link>
      <pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2017-11-03-fun-with-levenshtein-distance/</guid>
      <description>Fun with Levenshtein Distance The Levenshtein Distance is a clever way to calculate how similar two strings are to each other. Every character that differs between two words will count against the two words’ ‘score’. The lower that ‘score’ the more similar the two words are to each other. So comparing a word to itself will yield a ‘score’ of 0, while two four letter words that have no common characters will yield a ‘score’ of 4.</description>
    </item>
    
    <item>
      <title>Avoiding Retain Cycles in iOS</title>
      <link>https://meshstudio.io/blog/2017-10-13-avoiding-retain-cycles-in-ios/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://meshstudio.io/blog/2017-10-13-avoiding-retain-cycles-in-ios/</guid>
      <description>Retain cycles can be easily overlooked in the post ARC (automatic reference counting) world of iOS. They can quickly balloon out of control and crash your app with very cryptic crash logs if you don’t know how to catch them.
For those who may not be familiar, retain cycles are when two objects hold strong references to each other. Objects are only deallocated when they are not being held by strong references, so two objects that are referencing each other will never be deallocated.</description>
    </item>
    
  </channel>
</rss>